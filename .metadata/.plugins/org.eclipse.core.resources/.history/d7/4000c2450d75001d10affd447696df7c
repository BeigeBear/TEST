package com.addrbook.model;

import java.sql.*;
import java.util.ArrayList;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

public class AddrDao {

	public AddrDao() {}
	
	// AddrDao 객체 상주
	private static AddrDao instance = new AddrDao();

	// AddrDao 객체 요청 (싱글턴)
	public static AddrDao getInstance() {
		return instance;
	}
	
	
	private Connection getConnection() {
		Context context = null;
		DataSource datrSource = null;
		Connection connection = null;
	
		try {
			context = new InitialContext();
			datrSource = (DataSource) context.lookup("java:/comp/env/jdbc/Oracle11g");
			connection = datrSource.getConnection();
			System.out.println("연결 성공");
		}
		catch (Exception e) {
			System.out.println("연결 예외 발생");
			e.printStackTrace();
		}
		
		return connection;
	}
	
	
	// 주소록 리스트 호출
	public ArrayList<AddrDto> getList() {
		ArrayList<AddrDto> addrList = new ArrayList<>();
		
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		
		try {
			connection = getConnection();
			pstmt = connection.prepareStatement("SELECT *"
					+ "FROM addrbook"
					+ "ORDER BY ID DESC");
			resultSet = pstmt.executeQuery();
			
			while(resultSet.next()) {
				int id = resultSet.getInt("id");
				String name = resultSet.getString("name");
				String email = resultSet.getString("email");
				String comdept = resultSet.getString("comdept");
				String birth = resultSet.getString("birth");
				String tel = resultSet.getString("tel");
				String memo = resultSet.getString("memo");
				
				addrList.add(new AddrDto(id, name, email, comdept, birth, tel, memo));
			}
		}
		catch (SQLException e) {
			System.out.println("getList() 예외 발생");
			e.printStackTrace();
		}
		finally {
			try {
				resultSet.close();
				pstmt.close();
				connection.close();
			}
			catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		
		return addrList;
	}
	
	
	// 주소록 연락처 삽입
	public void insertAddr(AddrDto addr) {
		
		Connection connection = null;
		PreparedStatement pstmt = null;
		
		try {
			connection = getConnection();
			pstmt = connection.prepareStatement("INSERT INTO addrbook VALUES(addr_seq.nextval, ?, ?, ?, ?, ?, ?)");
			
			pstmt.setString(1, addr.getName());
			pstmt.setString(2, addr.getEmail());
			pstmt.setString(3, addr.getComdept());
			pstmt.setString(4, addr.getBirth());
			pstmt.setString(5, addr.getTel());
			pstmt.setString(6, addr.getMemo());
			
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			System.out.println("insertAddr() 예외 발생");
			e.printStackTrace();
		}
		finally {
			try {
				pstmt.close();
				connection.close();
			}
			catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	} // 클래스
	
	
	// 주소록 개별 연락처 호출
	public AddrDto readById(int id) {
		AddrDto addrDto = new AddrDto();
		
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		
		try {
			connection = getConnection();
			pstmt = connection.prepareStatement
					("SELECT *"
					+ "FROM addrbook"
					+ "WHERE id=?");
			pstmt.setInt(1, id);
			resultSet = pstmt.executeQuery();
			
			resultSet.next();
			
			String name = resultSet.getString("name");
			String email = resultSet.getString("email");
			String comdept = resultSet.getString("comdept");
			String birth = resultSet.getString("birth");
			String tel = resultSet.getString("tel");
			String memo = resultSet.getString("memo");
			
			addrDto = new AddrDto(id, name, email, comdept, birth, tel, memo);

	
	
//	======================================================================================
	
	
	
	Connection conn = null;
	PreparedStatement pstmt = null;
	
	// 오라클 연결 정보
	String jdbc_driver = "oracle.jdbc.driver.OracleDriver";
	String jdbc_url = "jdbc:oracle:thin:@localhost:1521";
	String jdbc_id = "scott";
	String jdbc_pw = "tiger";
	
	// 데이터베이스 연결 메소드
	void connect() {
		try {
			Class.forName(jdbc_driver);
			
			conn = DriverManager.getConnection(jdbc_url, jdbc_id, jdbc_pw);
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	void disconnect() {
		if(pstmt != null) {
			try {
				pstmt.close();
			} catch(SQLException e) {
				e.printStackTrace();
			}
		}
		if(conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
	// 수정된 주소록 내용 갱신을 위한 메소드
	public boolean updateDB(AddrBook addrbook) {
		connect();
		
		String sql = "UPDATE addrbook SET ab_name = ?, ab_email = ?, ab_birth = ?, ab_tel = ?, ab_comdept = ?, ab_memo = ? WHERE ab_id = ?";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, addrbook.getAb_name());
			pstmt.setString(2, addrbook.getAb_email());
			pstmt.setString(3, addrbook.getAb_birth());
			pstmt.setString(4, addrbook.getAb_tel());
			pstmt.setString(5, addrbook.getAb_comdept());
			pstmt.setString(6, addrbook.getAb_memo());
			pstmt.setInt(7, addrbook.getAb_id());
			
			pstmt.executeUpdate();
			
		} 
		catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		finally {
			disconnect();
		}
		return true;
	}
	
	
	// 특정 주소록 게시글 삭제 메소드
	public boolean deleteDB(int gb_id) {
		connect();
		
		String sql = "DELETE FROM addrbook WHERE ab_id = ?";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, gb_id);
			
			pstmt.executeUpdate();
			
		} 
		catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		finally {
			disconnect();
		}
		return true;
	}
	
	
	// 신규 주소록 메세지 추가 메소드
	public boolean insertDB(AddrBook addrbook) {
		connect();
		// sql 문자열, gb_id는 자동 등록되므로 입력하지 않는다.
		
		String sql = "INSERT INTO addrbook(ab_id, ab_name, ab_email, ab_birth, ab_tel, ab_comdept, ab_memo)"
				+ "VALUES(addr_SEQ.nextval, ?, ?, ?, ?, ?, ?)";
		
		try {
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, addrbook.getAb_name());
			pstmt.setString(2, addrbook.getAb_email());
			pstmt.setString(3, addrbook.getAb_birth());
			pstmt.setString(4, addrbook.getAb_tel());
			pstmt.setString(5, addrbook.getAb_comdept());
			pstmt.setString(6, addrbook.getAb_memo());
			
			pstmt.executeUpdate();
			
		} 
		catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		finally {
			disconnect();
		}
		return true;
	}

	
	// 특정 주소록 게시글 가져오는 메소드
//	public AddrBook getDB(int gb_id) {
//		connect();
//		
//		String sql = "SELECT * FROM addrbook WHERE ab_id = ?";
//		
//		AddrBook addrbook = new AddrBook();
//		
//		try {
//			pstmt = conn.prepareStatement(sql);
//			pstmt.setInt(1, gb_id);
//			ResultSet rs = pstmt.executeQuery();
//			
//			// 데이터가 하나만 있으면 rs.next()를 한번 만 실행한다.
//			rs.next();
//			addrbook.setAb_id(rs.getInt("ab_id"));
//			addrbook.setAb_name(rs.getString("ab_name"));
//			addrbook.setAb_email(rs.getString("ab_email"));
//			addrbook.setAb_birth(rs.getString("ab_birth"));
//			addrbook.setAb_tel(rs.getString("ab_tel"));
//			addrbook.setAb_comdept(rs.getString("ab_comdept"));
//			addrbook.setAb_memo(rs.getString("ab_memo"));
//			rs.close();
//		}
//		catch (SQLException e) {
//			e.printStackTrace();
//		}
//		finally {
//			disconnect();
//		}
//		return addrbook;
//	}
//	
	public AddrBook getDB(int gb_id) {
		connect();
		
		String sql = "select * from addrbook where ab_id=?";
		AddrBook addrbook = new AddrBook();
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,gb_id);
			ResultSet rs = pstmt.executeQuery();
			
			// 데이터가 하나만 있으므로 rs.next()를 한번만 실행 한다.
			rs.next();
			addrbook.setAb_id(rs.getInt("ab_id"));
			addrbook.setAb_name(rs.getString("ab_name"));
			addrbook.setAb_email(rs.getString("ab_email"));
			addrbook.setAb_birth(rs.getString("ab_birth"));
			addrbook.setAb_tel(rs.getString("ab_tel"));
			addrbook.setAb_comdept(rs.getString("ab_comdept"));
			addrbook.setAb_memo(rs.getString("ab_memo"));
			rs.close();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			disconnect();
		}
		return addrbook;
	}
	
	
	
	// 전체 주소록 목록을 가져오는 메소드
	public ArrayList<AddrBook> getDBList() {
		connect();
		
		ArrayList<AddrBook> datas = new ArrayList<>();
				
		String sql = "SELECT * "
				+ "FROM addrbook "
				+ "ORDER BY ab_id ASC";
		
		try {
			pstmt = conn.prepareStatement(sql);
		
			ResultSet rs = pstmt.executeQuery();
			
			while (rs.next()) {
				AddrBook addrbook = new AddrBook();
				
				addrbook.setAb_id(rs.getInt("ab_id"));
				addrbook.setAb_name(rs.getString("ab_name"));
				addrbook.setAb_email(rs.getString("ab_email"));
				addrbook.setAb_birth(rs.getString("ab_birth"));
				addrbook.setAb_tel(rs.getString("ab_tel"));
				addrbook.setAb_comdept(rs.getString("ab_comdept"));
				addrbook.setAb_memo(rs.getString("ab_memo"));
				
				// ArrayList에 추가
				datas.add(addrbook);
			}
			rs.close();
			
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			disconnect();
		}
		return datas;
	}
	
	
}
